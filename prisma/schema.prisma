generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collaborator {
  id                         Int                     @id @default(autoincrement())
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  name                       String                  @db.VarChar(255)
  department_id              Int?
  status                     StatusType
  photo                      String?  @db.VarChar(2048)
  social_name                String                  @db.VarChar(255)
  sex                        SexType
  nationality                String                  @db.VarChar(100)
  birthplace                 String                  @db.VarChar(100)
  state                      String                  @db.VarChar(50)
  marital_status             MaritalStatusType
  t_shirt_size               TShirtSizeType
  personal_email             String                  @db.VarChar(255)
  phone_number               String                  @db.VarChar(20)
  date_of_birth              DateTime                @db.Date
  ethnicity                  EthnicityType
  cpf_number                 String                  @db.VarChar(14)
  rg_number                  String                  @db.VarChar(20)
  rg_issuing_body            String                  @db.VarChar(50)
  rg_state                   RgStateType
  rg_issue_date              DateTime                @db.Date
  address                    String                  @db.VarChar(255)
  residence_number           Int
  complement                 String                  @db.VarChar(100)
  neighborhood               String                  @db.VarChar(100)
  city                       String                  @db.VarChar(100)
  cep                        String                  @db.VarChar(9)
  mother_name                String                  @db.VarChar(255)
  father_name                String                  @db.VarChar(255)
  pis_number                 String                  @db.VarChar(14)
  pis_registration_date      DateTime?               @db.Date
  has_itau_account           Boolean?
  itau_account               String?                 @db.VarChar(20)
  itau_agency                String?                 @db.VarChar(10)
  has_cnpj                   Boolean?
  cnpj_corporate_name        String?                 @db.VarChar(255)
  cnpj_bank_details          String?                 @db.VarChar(255)
  has_disability             Boolean
  start_date                 DateTime                @db.Date
  shutdown_date              DateTime?               @db.Date
  shutdown_type              String?
  shutdown_reason            String?
  voter_registration_number  BigInt?
  voter_registration_zone    String?                 @db.VarChar(10)
  voter_registration_section String?                 @db.VarChar(10)
  reservist_number           String?                 @db.VarChar(30)
  reservist_category         String?                 @db.VarChar(30)
  education                  EducationType
  training_course            String?                 @db.VarChar(255)
  course_completion_date     DateTime?               @db.Date
  corporate_email            String?                 @db.VarChar(255)
  type_of_contract           ContractType
  position                   PositionType?
  level                      LevelType?
  leads_team                 Boolean?
  leader                     String?
  salary                     String?
  variable                   String?
  bonus                      String?
  has_dependents             Boolean
  will_use_vt                Boolean?
  will_use_parking           Boolean?
  number_of_dependents       Int?
  department                 Department?             @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dependents                 Dependent[]
  documents                  Documents[]
  emergency_contacts         EmergencyContact[]
  transportation_voucher     TransportationVoucher[]
  vehicles                   Vehicle[]

  @@map("collaborators")
}

model Department {
  id            Int            @id(map: "departaments_pkey") @default(autoincrement())
  name          String         @db.VarChar(255)
  slug          String         @db.VarChar(255)
  board         String         @db.VarChar(50)
  cost_center   String         @db.VarChar(50)
  group_email   String         @db.VarChar(255)
  company       String         @db.VarChar(100)
  collaborators Collaborator[]
  @@map("departments")
}

model Dependent {
  id                 Int          @id @default(autoincrement())
  collaborator_id    Int
  name               String       @db.VarChar(255)
  degree_of_kinship  String       @db.VarChar(50)
  birth_date         DateTime     @db.Date
  birth_certificate  String?  @db.VarChar(2048)
  cpf                String?  @db.VarChar(2048)
  proof_of_education String?  @db.VarChar(2048)
  collaborator       Collaborator @relation(fields: [collaborator_id], references: [id])

  @@map("dependents")
}

model Documents {
  id                    Int          @id @default(autoincrement())
  collaborator_id       Int
  marriage_certificate  String?  @db.VarChar(2048)
  medical_report        String?  @db.VarChar(2048)
  voter_registration    String?  @db.VarChar(2048)
  rg                    String?  @db.VarChar(2048)
  cpf                   String?  @db.VarChar(2048)
  proof_of_residence    String?  @db.VarChar(2048)
  digital_work_card     String?  @db.VarChar(2048)
  reservist_certificate String?  @db.VarChar(2048)
  proof_of_stable_union String?  @db.VarChar(2048)
  cnpj                  String?  @db.VarChar(2048)
  proof_of_education    String?  @db.VarChar(2048)
  collaborator          Collaborator @relation(fields: [collaborator_id], references: [id])

  @@map("documents")
}

model EmergencyContact {
  id                Int          @id @default(autoincrement())
  collaborator_id   Int
  name              String       @db.VarChar(255)
  degree_of_kinship String       @db.VarChar(50)
  phone_number      String       @db.VarChar(20)
  collaborator      Collaborator @relation(fields: [collaborator_id], references: [id])

  @@map("emergency_contacts")
}

model TransportationVoucher {
  id                     Int          @id @default(autoincrement())
  collaborator_id        Int
  witch_card             String       @db.VarChar(50)
  daily_round_trip_price Decimal      @db.Decimal(10, 2)
  details_of_lines_used  String
  collaborators          Collaborator @relation(fields: [collaborator_id], references: [id])

  @@map("transportation_voucher")
}

model Vehicle {
  plate           String       @id @db.VarChar(10)
  collaborator_id Int
  year            Int
  brand           String       @db.VarChar(50)
  model           String       @db.VarChar(50)
  color           String       @db.VarChar(30)
  collaborator    Collaborator @relation(fields: [collaborator_id], references: [id])

  @@map("vehicles")
}

model Staff {
  created_at DateTime @default(now()) @db.Timestamptz(6)
  email      String   @unique @db.VarChar
  password   String   @db.VarChar
  id         String   @id @unique @db.Uuid

  @@map("staffs")
}

enum ContractType {
  CLT
  PJ
  Estagio
  Temporario
  Autonomo
}

enum EducationType {
  Ensino_medio_completo @map("Ensino médio completo")
  Ensino_superior_incompleto @map("Ensino superior incompleto")
  Ensino_superior_completo @map("Ensino superior completo")
  Pos_graduacao_incompleto @map("Pós graduação/mestreado/MBA incompleto")
  Pos_graduacao_completo @map("Pós graduação/mestreado/MBS completo")
}

enum EthnicityType {
  Branca
  Preta
  Parda
  Amarela
  Indigena
}

enum LevelType {
  Junior       @map("Júnior")
  Pleno
  Senior       @map("Sênior")
  Especialista
}

enum MaritalStatusType {
  Solteiro
  Casado
  Divorciado
  Viuvo      @map("Viúvo")
}

enum PositionType {
  Desenvolvedor
  Analista
  Gerente
  Diretor
  Estagiario
  Assistente
}

enum RgStateType {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

enum SexType {
  Masculino
  Feminino
  Outro
}

enum StatusType {
  Ativo
  Inativo
  Pendente
}

enum TShirtSizeType {
  PP
  P
  M
  G
  GG
  XG
  XXG
}
